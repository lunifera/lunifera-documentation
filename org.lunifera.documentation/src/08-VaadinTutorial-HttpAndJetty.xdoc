chapter:VaadinTutorial_HttpAndJetty[Vaadin tutorial - "Using lunifera http and jetty"]

This tutorial demos how you can create your own vaadin application. If you are looking for code samples
just take a look at the link[https://github.com/lunifera/lunifera-examples/tree/master/runtime-web][example repo].

ATTENTION: No vaadin push is provided by the example!

To create you own application you have to create two different bundles.
ul[
item[code[Application-bundle] - A bundle that contains the implementation of codeRef[com.vaadin.ui.UI][com.vaadin.ui.UI] which is the main entry point. (See ref:_IVaadinApplication[UiProvider])]
item[code[WidgetSet-bundle] - A bundle providing the widgetset used by vaadin at client side. (Optional)]
item[code[Targetdefinition-file] - Defines the target platform used to run the application properly.]
]

section:VaadinTutorial_HttpAndJetty_VaadinApplicationBundle[Application Bundle]

The application bundle is used to provide an instance of codeRef[com.vaadin.ui.UI][com.vaadin.ui.UI]
to the vaadin core. Vaadin will use it as an abstraction for a browser tab and will render all contained
UI elements on it. So the UI-instance is the very central element to deal with.

Since lunifera.org is based on OSGi the UI-instances will be created by a ComponentFactory. Using that
way of instantiating new objects allows the use of the whiteboard pattern. Whiteboard
pattern means, that OSGi-services can become injected automatically into the UI-instance by OSGi-DS (Declarative
services).  

The application also has to route the vaadin application. This should mean, that it has to define which
webapplication should be used to run the vaadin application. (Detailed information according lunifera HttpApplication
can be found here: ref:HttpApplication[HttpApplication])


Now lets start implementing our first example.
This section demos the steps to prepare the application bundle.


section2[Finished bundle]

img[../images/VaadinCMExample_1.png][Image 1: Finished bundle][img-small][]

This image shows the structure of the finished bundle.


section2[Prepare bundle]

Use eclipse to create a plugin project like code[org.lunifera.examples.runtime.web.vaadin.cm]. You do not need an activator since we are using declarative services.

Open MANIFEST.MF and add following entries
code[Manifest][
Bundle-Version: 0.0.1.qualifier
Service-Component: OSGI-INF/*.xml
Import-Package: org.osgi.service.component;version="1.2.0"
Require-Bundle: javax.servlet;bundle-version="3.0.0",
 com.vaadin.shared;bundle-version="7.0.0",
 com.vaadin.server;bundle-version="7.0.0",
 org.json;bundle-version="1.0.0",
 org.lunifera.runtime.web.vaadin.osgi;bundle-version="0.0.1",
 org.lunifera.runtime.common;bundle-version="0.0.1"
Bundle-ActivationPolicy: lazy
Lunifera-Config: config
]


section2[Create UI class]

Create your UI-class. This will be the entry point for your UI-code. 

And add following code to the class.
code[Java][
@Theme(Reindeer.THEME_NAME)
public class Vaadin7CMDemoUI extends OSGiUI {

	@Override
	public void init(VaadinRequest request) {
		// your UI code will be placed here later
	}
]

Now we have prepared a bundle that contains a working definition of code[com.vaadin.ui.UI]. As you can
see, we are extending an OSGiyfied version called code[OSGiUI]. 


section2[Create OSGi-Component-Factory]

The main problem for now is, that the code[Vaadin-OSGi-Bridge] is not aware about our code[Vaadin7CMDemoUI].
So we are using OSGi-DS (Declarative OSGi-service) to register that class at the bridge.
	

Create a folder OSGI-INF in your bundle and add a file called vaadinUI.xml. 

Then paste following code into it and replace code[org.lunifera.examples.runtime.web.vaadin.cm.Vaadin7CMDemoUI]
by the UI-Classname of your example. Also change the name of the service.

code[
<?xml version="1.0" encoding="UTF-8"?>
<scr:component xmlns:scr="http://www.osgi.org/xmlns/scr/v1.1.0" 
		factory="org.lunifera.web.vaadin.UI/org.lunifera.examples.runtime.web.vaadin.cm.Vaadin7CMDemoUI@VaadinDemo-VaadinApplication" 
		immediate="false" name="org.lunifera.examples.runtime.web.vaadin.cm.ui">
   <implementation class="org.lunifera.examples.runtime.web.vaadin.cm.Vaadin7CMDemoUI"/>
</scr:component>
]

code[org.lunifera.web.vaadin.UI/org.lunifera.examples.runtime.web.vaadin.cm.Vaadin7CMDemoUI@VaadinDemo-VaadinApplication]
uses following structure.

ul[
item[code[org.lunifera.web.vaadin.UI] - Used by OSGi to find the factory.]
item[/]
item[code[org.lunifera.examples.runtime.web.vaadin.cm.Vaadin7CMDemoUI] - The name of the
UI class as workaround since no properties can be passed into a component factory. Vaadin need the UI-class
in the UIProvider.]
item[@]
item[code[VaadinDemo-VaadinApplication] - The name of the vaadin application this UI should be used
with. Can be empty.]
]

A detailed description about the service definition can be found here ref:_IVaadinApplication[VaadinApplication].

Now the code[Vaadin-OSGi-Bridge] is aware about the UI-class and got the capability to instantiate it
by the ComponentFactory.


section:VaadinTutorial_HttpAndJetty_VaadinApplicationBundle_Configure[Configure Applications]

In order to use the UI-class we have to define...
ul[
item[A VaadinApplication that initializes the HttpService with servlets and resources and provides the UI-class to vaadin core.]
item[A HttpApplication which is an abstraction above a servlet context. Each HttpApplication has its
very own contextPath and provides a HttpService. A HttpApplication can run exactly one VaadinApplication.]
item[A JettyServer instance. Each jetty server can host many HttpApplications.]
]

Therefore we are using codeRef[org.lunifera.runtime.component.configuration.manager.service.IConfigurationService][ConfigurationService].
This service reads properties from a file and pass them to the OSGi Configuration Admin.

Detailed information about codeRef[org.lunifera.runtime.component.configuration.manager.service.IConfigurationService][ConfigurationService]
is under construction. 

section2:_configureJetty[Configure Jetty]

Create a folder called config in the bundle and place a file called code[lunifera.jetty.server.factory_Vaadin1.cfg] there.

Paste following code in there
code[
# configuration to start a jetty server
lunifera.jetty.name=VaadinDemo-Server
lunifera.jetty.http.port=8080
]

Further information about jetty see ref:_JettyService[Intro] and ref:JettyService[JettyService]

section2:_configureHttpApplication[Configure HttpApplication]

To configure a HttpApplication (abstraction of servlet context) we also use the codeRef[org.lunifera.runtime.component.configuration.manager.service.IConfigurationService][ConfigurationService]. Place a file called code[lunifera.http.application.factory_Vaadin1.cfg] there.

Paste following code in there
code[
# configuration to start a vaadin service
lunifera.http.name=VaadinDemo-HttpApplication
lunifera.http.contextPath=/
lunifera.jetty.name=VaadinDemo-Server
]

Further information about jetty see ref:_HttpApplication[Intro] and ref:HttpApplication[HttpApplication]


section2:_configureVaadinApplication[Configure VaadinApplication]

To configure jetty we also use the codeRef[org.lunifera.runtime.component.configuration.manager.service.IConfigurationService][ConfigurationService]. Place a file called code[lunifera.vaadin.application.factory_Vaadin1.cfg] there.

Paste following code in there
code[
# configuration to start a vaadin service
lunifera.web.vaadin.name=VaadinDemo-VaadinApplication
lunifera.web.vaadin.uialias=cm
lunifera.web.vaadin.widgetset=org.lunifera.examples.runtime.web.vaadin.cm.widgetset.Widgetset
lunifera.http.name=VaadinDemo-HttpApplication
]

Further information about jetty see ref:_VaadinApplication[Intro] and ref:VaadinApplication[VaadinApplication]

section:VaadinTutorial_HttpAndJetty_VaadinWidgetsetBundle[Widgetset Bundle]

ATTENTION: This step is optional! It must be defined if additional addons should be used in the resulting
application.

For default widgetset just change the config for OSGi-CM to:
code[
# configuration to start a vaadin service
...
lunifera.web.vaadin.widgetset=com.vaadin.DefaultWidgetset
...
]


In order to run a VaadinApplication a widgetset bundle is required. It contains the client side web resources
like html, java script, images,...
Since vaadin is based on link[https://developers.google.com/web-toolkit/][GWT (Google Web Toolkit)] the
client side widgets are written in java and have to become compiled to java script. The result of that
compile is called widgetset. codeRef[org.lunifera.runtime.web.vaadin.osgi.servlet.WebResourcesHttpContext][WebResourcesHttpContext]
is used to provide the resources to the browser.

Lunifera.org uses maven to compile the widgset. So only a few manual steps are required during setup
but the compile is done automatically. Please note that you should not put the widgetset into the source
code repository. It may get some MB of data and each compile results in differing widgetset content that
has to be pushed again.


section2[Finished widgetset bundle]

img[../images/VaadinCMExample_2.png][Image 2: Finished widgetset bundle][img-small][]

This image shows the structure of the compiled widgetset bundle.

The most important parts are

ul[
item[code[Widgetset.gwt.xml] - Definition of the widgetset and its contents. Required for compile.]
item[code[resources-folder] - It contains the compiled widgetset. Should be added to .gitignore]
item[code[pom.xml] - Contains the definition to compile the widgetset properly.]
]


section2[Prepare bundle]

Use eclipse to create a plugin project like code[org.lunifera.examples.runtime.web.vaadin.cm.widgetset]. You do not need an activator.

Open MANIFEST.MF and add following entries and adjust versions if required.
code[Manifest][
Bundle-Version: 0.0.1.qualifier
Vaadin-Resources: resources
Require-Bundle: com.vaadin.server;bundle-version="7.0.0",
 com.vaadin.client;bundle-version="7.0.0",
 com.vaadin.shared;bundle-version="7.0.0",
 com.vaadin.shared.deps;bundle-version="1.0.2"
]

Note the code[Vaadin-Resources] header in the MANIFEST. It is used by codeRef[org.lunifera.runtime.web.vaadin.osgi.servlet.WebResourcesHttpContext][WebResourcesHttpContext]
to detect all vaadin resource bundles and the folder that contains the resources.

section2[Create  widgetset class]

Every widgetset need its own implementation of UI. So create a class called code[WidgetsetUI] and put
following code in it.
code[Java][
import com.vaadin.server.VaadinRequest;
import com.vaadin.ui.Label;
import com.vaadin.ui.UI;

@SuppressWarnings("serial")
public class WidgetsetUI extends UI {
	@Override
	public void init(VaadinRequest request) {
		Label label = new Label("Hello Vaadin user");
		setContent(label);
	}
}
]

section2[Create  widgetset]

Create a file called code[Widgetset.gwt.xml] and put following code in it.

code[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Google Inc.//DTD Google Web Toolkit 1.7.0//EN" 
	"http://google-web-toolkit.googlecode.com/svn/tags/1.7.0/distro-source/core/src/gwt-module.dtd">
<module>
	<inherits name="com.vaadin.DefaultWidgetSet" />
    <inherits name="org.vaadin.artur.icepush.IcepushaddonWidgetset" />
</module>
]

It defines a widgetset that used vaadins default widgetset and the widgetset of the ICEPush addon. Based
on that information the maven build will compile the widgetsets resources and javascript code based on
the contents of the named widgetset definitions. For instance html files, images and css files are added. Java-Classes are compiled to java script,...


section2[Configure widgetset build]

This tutorial does not include the way how to prepare your projects to give them a proper maven/tycho
nature. I assume that you are familar with that steps and will prepare the maven artefacts properly.

Now open the pom.xml of the project and add following information to it.


ul[
item[code[Dependencies] - Add all dependencies to the pom.xml as stated below.]
item[code[configure vaadin-maven-plugin] - Configure the vaadin-maven-plugin.]
]

Feel free to copy the code from the lunifera example into your pom.xml. It can be found here link[https://github.com/lunifera/lunifera-examples/blob/master/runtime-web/org.lunifera.examples.runtime.web.vaadin.cm.widgetset/pom.xml][pom.xml].

code[
	<dependencies>
		<dependency>
			<groupId>org.vaadin.addons</groupId>
			<artifactId>icepush</artifactId>
			<version>${vaadin-icepush-version}</version>
		</dependency>
		<dependency>
			<groupId>org.icefaces</groupId>
			<artifactId>icepush</artifactId>
			<version>${icepush-version}</version>
		</dependency>
		
		....
		....
		// all dependencies are required
		....
		....
		
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>LATEST</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>com.vaadin</groupId>
				<artifactId>vaadin-maven-plugin</artifactId>
				<version>7.0-SNAPSHOT</version>
				<configuration>
					<extraJvmArgs>-Xmx1024M -Xss1024k</extraJvmArgs>
					<!-- <runTarget>mobilemail</runTarget> -->
					<!-- We are doing "inplace" but into subdir VAADIN/widgetsets. This 
						way compatible with Vaadin eclipse plugin. -->
					<webappDirectory>${basedir}/resources/VAADIN/widgetsets
					</webappDirectory>
					<hostedWebapp>${basedir}/resources/VAADIN/widgetsets
					</hostedWebapp>
					<noServer>true</noServer>
					<!-- Remove draftCompile when project is ready -->
					<draftCompile>true</draftCompile>
					<strict>true</strict>
					<compileReport>false</compileReport>
					<style>PRETTY</style>
					<runTarget>http://localhost:8080/</runTarget>

					<!-- Remove these when going to release dependencies -->
					<force>true</force>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>resources</goal>
							<goal>compile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- As we are doing "inplace" GWT compilation, ensure the widgetset -->
			<!-- directory is cleaned properly -->
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					<filesets>
						<fileset>
							<directory>/resources/VAADIN/widgetsets</directory>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
]

section2[Adjust parent pom]

In the parent pom you have to add the vaadin-repositories.

code[
	<repository>
		<id>vaadin-addons</id>
		<url>http://maven.vaadin.com/vaadin-addons</url>
	</repository>
	<repository>
		<id>vaadin-snapshots</id>
		<url>http://oss.sonatype.org/content/repositories/vaadin-snapshots/</url>
		<releases>
			<enabled>false</enabled>
		</releases>
		<snapshots>
			<enabled>true</enabled>
		</snapshots>
	</repository>
]

And to define a profile to run the widgetset build.

code[
	<profile>
		<id>runtime-web--build-widgetsets</id>
		<activation>
			<activeByDefault>false</activeByDefault>
		</activation>
		<build>
			<defaultGoal>verify</defaultGoal>
			<plugins>
				<plugin>
					<groupId>org.eclipse.tycho</groupId>
					<artifactId>target-platform-configuration</artifactId>
					<version>${tycho-version}</version>
					<configuration>
						<!-- <resolver>p2</resolver> -->
						<!-- <pomDependencies>consider</pomDependencies> -->
						<ignoreTychoRepositories>true</ignoreTychoRepositories>
						<target>
							<artifact>
								<groupId>org.lunifera.examples</groupId>
								<artifactId>org.lunifera.examples.runtime.web.target.kepler</artifactId>
								<version>${project.version}</version>
							</artifact>
						</target>
					</configuration>
				</plugin>
			</plugins>
		</build>
		<modules>
			<module>runtime-web/org.lunifera.examples.runtime.web.target.kepler</module>
			<module>runtime-web/org.lunifera.examples.runtime.web.vaadin.cm.widgetset</module>
		</modules>
	</profile>
]

section:VaadinTutorial_HttpAndJetty_VaadinTargetPlatform[Targetdefinition]

A targetdefinition defines the bundles to be used to compile and run the application. The example states
above uses the target definition called code[org.lunifera.examples.runtime.web.target.kepler].

The runtime-web-repository contains a proper targetdefinition. Feel free to use it as a template for
your applications. Just remove things you do not need. The target definition can be found link[https://github.com/lunifera/lunifera-runtime-web/tree/master/org.lunifera.runtime.web.target.kepler][here].

img[../images/VaadinCMExample_3.png][Image 3: Resolved TargetDefinition][img-small][]


section:VaadinTutorial_HttpAndJetty_VaadinApplicationLaunch[Launch application]

To launch your vaadin application you have to create an OSGi-launch-config. Or just use link[https://github.com/lunifera/lunifera-examples/tree/vaaclipse/runtime-web/org.lunifera.examples.runtime.web.vaadin.cm/launch][this one]
as a template. 

You have to take care about following issues 

ul[
item[Add code[org.lunifera.runtime.component.configuration.manager] and set autostart true]
item[Add code[org.eclipse.equinox.ds]]
item[Add code[org.eclipse.equinox.cm] and set autostart true]
]

The following table shows all bundles required:

table[
tr[td[bundle] td[autostart] ]
tr[td[code[com.springsource.javax.portlet]] td[]]
tr[td[code[com.vaadin.client]] td[]]
tr[td[code[com.vaadin.server]] td[]]
tr[td[code[com.vaadin.shared.deps]] td[]]
tr[td[code[com.vaadin.shared]] td[]]
tr[td[code[com.vaadin.themes]] td[]]
tr[td[code[javax.el]] td[]]
tr[td[code[javax.servlet.jsp]] td[]]
tr[td[code[javax.servlet]] td[]]
tr[td[code[org.apache.commons.lang]] td[]]
tr[td[code[org.apache.commons.logging]] td[]]
tr[td[code[org.apache.felix.gogo.command]] td[]]
tr[td[code[org.apache.felix.gogo.runtime]] td[]]
tr[td[code[org.apache.felix.gogo.shell]] td[]]
tr[td[code[org.apache.log4j]] td[]]
tr[td[code[org.apache.shiro.core]] td[]]
tr[td[code[org.apache.shiro.web]] td[]]
tr[td[code[org.eclipse.equinox.cm]] td[true]]
tr[td[code[org.eclipse.equinox.common]] td[true]]
tr[td[code[org.eclipse.equinox.console]] td[]]
tr[td[code[org.eclipse.equinox.ds]] td[true]]
tr[td[code[org.eclipse.equinox.http.servlet]] td[]]
tr[td[code[org.eclipse.equinox.preferences]] td[]]
tr[td[code[org.eclipse.equinox.registry]] td[]]
tr[td[code[org.eclipse.equinox.util]] td[]]
tr[td[code[org.eclipse.jetty.continuation]] td[]]
tr[td[code[org.eclipse.jetty.http]] td[]]
tr[td[code[org.eclipse.jetty.io]] td[]]
tr[td[code[org.eclipse.jetty.security]] td[]]
tr[td[code[org.eclipse.jetty.server]] td[]]
tr[td[code[org.eclipse.jetty.servlet]] td[]]
tr[td[code[org.eclipse.jetty.util]] td[]]
tr[td[code[org.eclipse.osgi]] td[true]]
tr[td[code[org.eclipse.osgi.services]] td[]]
tr[td[code[org.jsoup]] td[]]
tr[td[code[org.lunifera.examples.runtime.web.vaadin.cm]] td[]]
tr[td[code[org.lunifera.examples.runtime.web.vaadin.cm.widgetset]] td[]]
tr[td[code[org.lunifera.runtime.common]] td[]]
tr[td[code[org.lunifera.runtime.component.configuration.manager]] td[true]]
tr[td[code[org.lunifera.runtime.web.common]] td[]]
tr[td[code[org.lunifera.runtime.web.http]] td[]]
tr[td[code[org.lunifera.runtime.web.jetty]] td[]]
tr[td[code[org.lunifera.runtime.web.vaadin.osgi]] td[]]
tr[td[code[org.lunifera.dependencies.bundle.vaadin.addon.icepush]] td[]]
tr[td[code[org.lunifera.dependencies.fragment.jdk]] td[]]
tr[td[code[slf4j.api]] td[]]
tr[td[code[slf4j.jcl]] td[]]
tr[td[code[slf4j.log4j12]] td[]]
]


section:VaadinTutorial_HttpAndJetty_VaadinApplicationStart[Start the application in browser]

The URL to access the application is based on following information.

http://localhost:{port}/{contextPath}/{alias}

table[
tr[td[Value] td[Property] td[See]]
tr[td[code[{port}]] td[code[lunifera.jetty.http.port]] td[ref:_configureJetty[Configure Jetty]]]
tr[td[code[{contextPath}]] td[code[lunifera.http.contextPath]] td[ref:_configureHttpApplication[Configure HttpApplication]]]
tr[td[code[{alias}]] td[code[lunifera.web.vaadin.uialias]] td[ref:_configureVaadinApplication[Configure VaadinApplication]]]
]

So the url to access the demo application is link[http://localhost:8080/cm][http://localhost:8080/cm].


section:VaadinTutorial_HttpAndJetty_OnProblem[In case of problems]

If any problems occur and the browser does not show anything, use following information to check if the
system started properly.

table[
tr[td[Issue type] td[Command help] td[Class to start debugging]]
tr[td[code[Nothing is started]]  td[] td[codeRef[org.lunifera.runtime.component.configuration.manager.spi.SystemConfigurationComponent][SystemConfigurationComponent#scanBundle]]]
tr[td[code[No Jetty started]]  td[ref:_jettyConsoleCommands[Commands]] td[codeRef[org.lunifera.runtime.web.jetty.internal.JettyFactory][JettyFactory#updated]]]
tr[td[code[No Http Application started]]  td[ref:_httpConsoleCommands[Commands]] td[codeRef[org.lunifera.runtime.web.http.internal.HttpApplicationFactory][HttpApplicationFactory#updated]]]
tr[td[code[No Vaadin Application started]] td[ref:VaadinApplication_vaadinConsoleCommands[Commands]] td[codeRef[org.lunifera.runtime.web.vaadin.osgi.webapp.VaadinApplicationFactory][VaadinApplicationFactory#updated]]]
]


